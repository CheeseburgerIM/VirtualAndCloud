(function(){"use strict";var e={947:function(e,n,o){o(6992),o(8674),o(9601),o(7727);var t,d,a,s,l,c,r,i,u,p,m,y,x,b,h,f,v,B,j,k,g,C,w,F,E,Z,_,T,S,z,O,L,R,P,A,D,I,M,$,N,W,q,J,H,G,U,K=o(8935),Q=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"app"}},[o("IndexPage")],1)},V=[],X=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"IndexPage"}},[o("div",{attrs:{id:"siteBackground"}}),o("div",{attrs:{id:"index"}},[o("transition",{attrs:{name:"navigation",appear:""}},[o("div",{attrs:{id:"navigation"}},[o("div",{attrs:{id:"menu"}},[o("div",{attrs:{id:"menuList"}},[o("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[o("router-link",{attrs:{to:"/index","active-class":"menuActive"}},[o("i",{staticClass:"el-icon-s-home"}),o("span",[e._v("主页")])])],1),o("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[o("router-link",{attrs:{to:"/code","active-class":"menuActive"}},[o("i",{staticClass:"el-icon-s-tools"}),o("span",[e._v("代码")])])],1),o("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[o("router-link",{attrs:{to:"/document","active-class":"menuActive"}},[o("i",{staticClass:"el-icon-s-management"}),o("span",[e._v("文档")])])],1),o("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[o("router-link",{attrs:{to:"/about","active-class":"menuActive"}},[o("i",{staticClass:"el-icon-s-custom"}),o("span",[e._v("关于")])])],1)])])])])],1),o("h1",{staticStyle:{"margin-top":"70px"}},[e._v("虚拟化技术与云计算 - 基于Serverless的数据预处理服务")]),o("transition",{attrs:{name:"content",appear:""}},[o("keep-alive",[o("router-view")],1)],1)],1)},Y=[],ee={name:"IndexPage",methods:{},mounted:function(){},data:function(){return{}}},ne=ee,oe=o(1001),te=(0,oe.Z)(ne,X,Y,!1,null,null,null),de=te.exports,ae={name:"App",components:{IndexPage:de}},se=ae,le=(0,oe.Z)(se,Q,V,!1,null,null,null),ce=le.exports,re=o(2809),ie=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"Home"}},[o("el-select",{staticStyle:{"margin-right":"17px"},attrs:{placeholder:"请选择云函数",filterable:"","default-first-option":!0},on:{change:function(n){return e.selectionChange()}},model:{value:e.value,callback:function(n){e.value=n},expression:"value"}},e._l(e.options,(function(e){return o("el-option",{key:e.key,attrs:{label:e.value,value:e.key}})})),1),o("el-button",{staticStyle:{"margin-left":"17px"},attrs:{type:"primary",plain:""},on:{click:function(n){return e.input()}}},[e._v("代码测试 RUN")]),o("div",{attrs:{id:"IO"}},[o("el-input",{attrs:{type:"textarea",autosize:{minRows:11,maxRows:11},placeholder:e.example,size:"large"},model:{value:e.text,callback:function(n){e.text=n},expression:"text"}}),o("el-input",{attrs:{type:"textarea",autosize:{minRows:11,maxRows:11},placeholder:e.expected,size:"large"},model:{value:e.result,callback:function(n){e.result=n},expression:"result"}})],1)],1)},ue=[],pe=(o(4916),o(3123),o(6699),o(2023),'# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.mean(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n'),me="[1,2,3,4,5,6,7]",ye="4",xe={code:pe,example:me,result:ye},be=xe,he=(0,oe.Z)(be,t,d,!1,null,null,null),fe=he.exports,ve='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(max(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Be="[5,20,10]",je="20",ke={code:ve,example:Be,result:je},ge=ke,Ce=(0,oe.Z)(ge,a,s,!1,null,null,null),we=Ce.exports,Fe='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(min(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Ee="[5,20,10]",Ze="5",_e={code:Fe,example:Ee,result:Ze},Te=_e,Se=(0,oe.Z)(Te,l,c,!1,null,null,null),ze=Se.exports,Oe='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.average(jsonBody["data"], weights=jsonBody["weight"])),\n        "headers": {"Content-Type": "application/json"},\n    }\n\n',Le='\n{\n    "data": [4,5,2,1,3],\n    "weight": [1,1,1,3,2]\n}\n',Re="2.5",Pe={code:Oe,example:Le,result:Re},Ae=Pe,De=(0,oe.Z)(Ae,r,i,!1,null,null,null),Ie=De.exports,Me='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(Counter(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',$e="[1,2,3,3,4,4,4,5]",Ne="\nCounter({\n    3: 2,\n    1: 1,\n    2: 1,\n    4: 1\n})",We={code:Me,example:$e,result:Ne},qe=We,Je=(0,oe.Z)(qe,u,p,!1,null,null,null),He=Je.exports,Ge='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.around(jsonBody["data"], jsonBody["bitcount"])),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Ue='\n{\n    "data": [1.936,4.656,3.074,4.7767],\n    "bitcount": 2\n}',Ke="\n[\n    1.94 4.66 3.07 4.78\n]",Qe={code:Ge,example:Ue,result:Ke},Ve=Qe,Xe=(0,oe.Z)(Ve,m,y,!1,null,null,null),Ye=Xe.exports,en='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\ndef handler (event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    x = np.var(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(x),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',nn="\n[1,3,7,9,4,0,-1,-3,-7,11,16]",on="\n40.59504132231405",tn={code:en,example:nn,result:on},dn=tn,an=(0,oe.Z)(dn,x,b,!1,null,null,null),sn=an.exports,ln='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(x),\n        "headers": {"Content-Type": "application/json"},\n    }\n\n',cn="\n[1,5,2,-5,4,3,0,-1,-3]",rn="\n-5,-3,-1,0,1,2,3,4,5",un={code:ln,example:cn,result:rn},pn=un,mn=(0,oe.Z)(pn,h,f,!1,null,null,null),yn=mn.exports,xn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n# from scipy import stats\n\n\ndef handler (event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    counts = np.bincount(jsonBody)\n    print(np.argmax(counts))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.argmax(counts)),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',bn="\n[3,2,6,8,1,2,3,4,3]",hn="3",fn={code:xn,example:bn,result:hn},vn=fn,Bn=(0,oe.Z)(vn,v,B,!1,null,null,null),jn=Bn.exports,kn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler (event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.median(jsonBody)),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',gn="\n[1,2,3,4,5,6,7,8]",Cn="4.5",wn={code:kn,example:gn,result:Cn},Fn=wn,En=(0,oe.Z)(Fn,j,k,!1,null,null,null),Zn=En.exports,_n='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    k = jsonBody["key"]\n    for key in k:\n        print(key, ": ", k[key])\n    m = jsonBody["data"]\n    c = len(m[0])\n    r = len(m)\n    t = [[0 for col in range(c)] for row in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if t[i][j] == 0:\n                for key in k:\n                    if m[i][j] == float(key):\n                        m[i][j] = k[key]\n                        t[i][j] = 1\n                        break\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(m),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Tn='\n{\n    "key":{\n        "1":0,\n        "0":1\n    },\n    "data":[\n        [0,1,2,3],\n        [1,2,3,4]\n    ]\n}',Sn="[1,0,2,3]\n[0,2,3,4]",zn={code:_n,example:Tn,result:Sn},On=zn,Ln=(0,oe.Z)(On,g,C,!1,null,null,null),Rn=Ln.exports,Pn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    jsonBody = jsonBody.split(".")\n    str1 = jsonBody[0].replace("[", "").replace("]", "")\n    str2 = jsonBody[1].replace("[", "").replace("]", "")\n    list1 = str1.split(",")\n    list2 = []\n    for i in list1:\n        i = float(i)\n        list2.append(i)\n    list3 = str2.split(",")\n    list4 = []\n    for i in list3:\n        i = float(i)\n        list4.append(i)\n    a = np.array([list2, list4])\n    ans = np.cov(a)\n    # avg1 = np.mean(list1)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',An='"[3,2,6,8,1,2,3,4,3].[1,2,3,4,5,6,7,8,9]"',Dn="\n[[ 4.77777778 -0.75      ]\n [-0.75        7.5       ]]",In={code:Pn,example:An,result:Dn},Mn=In,$n=(0,oe.Z)(Mn,w,F,!1,null,null,null),Nn=$n.exports,Wn='# -- coding:utf-8 --\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    list1 = []\n    for i in jsonBody:\n        list1.append((i - min(jsonBody)) / (max(jsonBody) - min(jsonBody)))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(list1),\n        "headers": {"Content-Type": "application/json"},\n    }\n',qn="[3,4,1,2,0]",Jn="\n[0.75, 1.0, 0.25, 0.5, 0.0]",Hn={code:Wn,example:qn,result:Jn},Gn=Hn,Un=(0,oe.Z)(Gn,E,Z,!1,null,null,null),Kn=Un.exports,Qn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = np.array(jsonBody, dtype=np.float)\n    raw = len(a)\n    col = len(a[0])\n    temp = []\n    # ans = []\n    for i in range(0, raw):\n        vec = a[i]\n        for j in range(0, col):\n            if np.isnan(vec[j]):\n                a[i][j] = 0\n    # ans = np.array(ans)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Vn="\n[\n    [1,2,null,4],\n    [null,3,4,5],\n    [5,2,null,7],\n    [6,1,2,10]\n]",Xn="[1,0,2,3]\n[0,2,3,4]",Yn={code:Qn,example:Vn,result:Xn},eo=Yn,no=(0,oe.Z)(eo,_,T,!1,null,null,null),oo=no.exports,to='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["axis"]\n    m = jsonBody["data"]\n    l = len(jsonBody)\n    ans = []\n    if l == 1:\n        ans.append(m)\n    else:\n        ans.append(np.concatenate(m,int(a)))\n        # for i in range(l - 1):\n        #     ans.append(np.append(m[i], m[i + 1], int(a)))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',ao='\n{\n    "axis": 0, // 0为行拼接;1为列拼接\n    "data": [\n        [\n            [1,2,3],\n            [2,3,4]\n        ],\n        [\n            [5,6,7],\n            [6,7,8]\n        ],\n        [\n            ["a","b","c"],\n            ["d","e","f"]\n        ]\n    ]\n}',so="\n[['1', '2', '3'],\n['2', '3', '4'],\n['5', '6', '7'],\n['6', '7', '8'],\n['a', 'b', 'c'],\n['d', 'e', 'f']]",lo={code:to,example:ao,result:so},co=lo,ro=(0,oe.Z)(co,S,z,!1,null,null,null),io=ro.exports,uo='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody)\n    jsonBody = json.loads(decodedBody)\n    decodedBody = decodedBody.decode()\n    arr = np.array(jsonBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.array(list(set([tuple(t) for t in arr])))),\n        "headers": {"Content-Type": "application/json"},\n    }\n',po="\n[\n    [1,2,3],\n    [1,2,3],\n    [2,3,4]\n]",mo="\n[[2 3 4]\n [1 2 3]]",yo={code:uo,example:po,result:mo},xo=yo,bo=(0,oe.Z)(xo,O,L,!1,null,null,null),ho=bo.exports,fo='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    mean = np.mean(jsonBody)\n    std = np.std(jsonBody)\n    sigma = std * 3\n    a = np.array(jsonBody, dtype=float)\n    row = len(a)\n    col = len(a[0])\n\n    # ans = np.array()\n    counterlist = []\n    for i in range(0, row):\n        for j in range(0, col):\n            if (a[i][j] - mean) > sigma:\n                counterlist.append(i)\n    for i in counterlist:\n        a = np.delete(a, i, 0)\n\n    # x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',vo="\n[\n    [2,3,4,5],\n    [5,2,4,7],\n    [1,2,10000,4],\n    [10000,100000,10000,10000]\n]",Bo="\n[2,3,4,5]\n[5,2,4,7]\n[1,2,10000,4]",jo={code:fo,example:vo,result:Bo},ko=jo,go=(0,oe.Z)(ko,R,P,!1,null,null,null),Co=go.exports,wo='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["data"]\n    a = sorted(a)\n    l = len(a)\n    w = jsonBody["width"]\n    maximum = max(a)\n    minimum = min(a)\n    x = int((maximum - minimum) / w)  # 结果共有x(+1)组数据\n    print(a, l, w, x)\n    ans = {}\n    index = -1\n    for i in range(x):\n        key = str(w * i) + "~" + str((w * (i + 1)))\n        value = []\n        for j in range(index + 1, l):\n            if a[j] <= w * (i + 1):\n                index = j\n                value.append(a[j])\n        ans[key] = value\n        print(key, " - ", value)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Fo='\n{\n    "width":4,\n    "data":[3,6,1,8,3,0,5]\n}',Eo="\n0~4: 0,1,3,3\n4~8: 5,6,8",Zo={code:wo,example:Fo,result:Eo},_o=Zo,To=(0,oe.Z)(_o,A,D,!1,null,null,null),So=To.exports,zo='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["data"]\n    a = sorted(a)\n    l = len(a)\n    f = jsonBody["frequency"]\n    n = int(l * f)  # 每组数据的个数\n    x = int(l / n)  # 结果共有x(+1)组数据\n    y = l - x * n  # 第x+1组的数据\n    print(a, l, f, n, x, y)\n    ans = {}\n    for i in range(x):\n        key = str(n * i) + "~" + str((n * (i + 1)))\n        value = a[n * i : (n * (i + 1))]\n        ans[key] = value\n        print(key, " - ", value)\n    if y != 0:\n        key = str(n * x) + "~" + str(l)\n        value = a[n * x :]\n        ans[key] = value\n        print(key, " - ", value)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Oo='\n{\n    "frequency":0.4,\n    "data":[3,6,1,8,3,0,5]\n}',Lo="\n0~2: 0,1\n2~4: 3,3\n4~6: 5,6\n6~7: 8",Ro={code:zo,example:Oo,result:Lo},Po=Ro,Ao=(0,oe.Z)(Po,I,M,!1,null,null,null),Do=Ao.exports,Io='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    mean = np.mean(jsonBody)\n    # std = np.std(jsonBody)\n    # sigma = std * 3\n    a = np.array(jsonBody, dtype=float)\n    row = len(a)\n    col = len(a[0])\n\n    # ans = np.array()\n    tempSet = set()\n    counterlist = []\n    for i in range(0, col):\n        for j in range(0, row):\n            tempSet.add(a[j][i])\n        if len(tempSet) == row:\n            counterlist.append(i)\n        tempSet = set()\n    print(counterlist)\n    for i in range(len(counterlist) - 1, -1, -1):\n        a = np.delete(a, counterlist[i], 1)\n\n    # x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Mo="\n[\n    [1,3,5,7],\n    [2,4,6,8],\n    [3,6,9,12],\n    [2,5,7,8]\n]",$o="\n[1,7]\n[2,8]\n[3,12]\n[2,8]",No={code:Io,example:Mo,result:$o},Wo=No,qo=(0,oe.Z)(Wo,$,N,!1,null,null,null),Jo=qo.exports,Ho='import json\nimport base64\nimport numpy as np\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody)\n    jsonBody = json.loads(decodedBody)\n    decodedBody = decodedBody.decode()\n    res = []\n    colnum = jsonBody["col"] - 1\n    boundary = jsonBody["boundary"]\n    arr = np.array(jsonBody["data"], dtype=str)\n    raw = len(arr)\n    col = len(arr[0])\n    list = []\n    temp = []\n    for i in range(0, raw):\n        for j in range(0, col):\n            if j != colnum:\n                temp.append(int(arr[i][j]))\n            else:\n                if int(arr[i][colnum]) >= boundary:\n                    temp.append("high")\n                else:\n                    temp.append("low")\n        list += [temp]\n        temp = []\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(list),\n        "headers": {"Content-Type": "application/jsin"},\n    }\n',Go='\n{\n    "col":3,\n    "boundary":18,\n    "data":[\n        [14,5,20,11],\n        [26,11,56,24],\n        [33,26,15,5]\n    ]\n}',Uo="\n[1,7]\n[2,8]\n[3,12]\n[2,8]",Ko={code:Ho,example:Go,result:Uo},Qo=Ko,Vo=(0,oe.Z)(Qo,W,q,!1,null,null,null),Xo=Vo.exports,Yo="# Please select a function first",et={code:fe.code,example:fe.example,result:fe.result},nt={code:we.code,example:we.example,result:we.result},ot={code:ze.code,example:ze.example,result:ze.result},tt={code:Ie.code,example:Ie.example,result:Ie.result},dt={code:He.code,example:He.example,result:He.result},at={code:Ye.code,example:Ye.example,result:Ye.result},st={code:sn.code,example:sn.example,result:sn.result},lt={code:yn.code,example:yn.example,result:yn.result},ct={code:jn.code,example:jn.example,result:jn.result},rt={code:Zn.code,example:Zn.example,result:Zn.result},it={code:Rn.code,example:Rn.example,result:Rn.result},ut={code:Nn.code,example:Nn.example,result:Nn.result},pt={code:Kn.code,example:Kn.example,result:Kn.result},mt={code:oo.code,example:oo.example,result:oo.result},yt={code:io.code,example:io.example,result:io.result},xt={code:ho.code,example:ho.example,result:ho.result},bt={code:Co.code,example:Co.example,result:Co.result},ht={code:So.code,example:So.example,result:So.result},ft={code:Do.code,example:Do.example,result:Do.result},vt={code:Jo.code,example:Jo.example,result:Jo.result},Bt={code:Xo.code,example:Xo.example,result:Xo.result},jt={code:Yo,code1:et,code2:nt,code3:ot,code4:tt,code5:dt,code6:at,code7:st,code8:lt,code9:ct,code10:rt,code11:it,code12:ut,code13:pt,code14:mt,code15:yt,code16:xt,code17:bt,code18:ht,code19:ft,code20:vt,code21:Bt},kt=jt,gt=(0,oe.Z)(kt,J,H,!1,null,null,null),Ct=gt.exports,wt=[{key:"1",value:"平均值"},{key:"2",value:"最大值"},{key:"3",value:"最小值"},{key:"4",value:"加权平均"},{key:"5",value:"计数"},{key:"6",value:"保留小数"},{key:"7",value:"方差"},{key:"8",value:"排序"},{key:"9",value:"众数"},{key:"10",value:"中位数"},{key:"11",value:"数据替换"},{key:"12",value:"协方差"},{key:"13",value:"归一化"},{key:"14",value:"填补空缺值"},{key:"15",value:"多数组拼接"},{key:"16",value:"去除冗余"},{key:"17",value:"去除离群值"},{key:"18",value:"等宽离散化"},{key:"19",value:"等频离散化"},{key:"20",value:"去除唯一属性"},{key:"21",value:"数据分组"}],Ft={FunctionList:wt},Et=Ft,Zt=(0,oe.Z)(Et,G,U,!1,null,null,null),_t=Zt.exports,Tt={name:"Home",components:{},methods:{selectionChange:function(){this.text="",this.result="";var e="请以JSON格式输入函数所需参数\nExample: ",n="Expected Result: ";switch(this.value){case"1":this.example=e+Ct.code1.example,this.expected=n+Ct.code1.result;break;case"2":this.example=e+Ct.code2.example,this.expected=n+Ct.code2.result;break;case"3":this.example=e+Ct.code3.example,this.expected=n+Ct.code3.result;break;case"4":this.example=e+Ct.code4.example,this.expected=n+Ct.code4.result;break;case"5":this.example=e+Ct.code5.example,this.expected=n+Ct.code5.result;break;case"6":this.example=e+Ct.code6.example,this.expected=n+Ct.code6.result;break;case"7":this.example=e+Ct.code7.example,this.expected=n+Ct.code7.result;break;case"8":this.example=e+Ct.code8.example,this.expected=n+Ct.code8.result;break;case"9":this.example=e+Ct.code9.example,this.expected=n+Ct.code9.result;break;case"10":this.example=e+Ct.code10.example,this.expected=n+Ct.code10.result;break;case"11":this.example=e+Ct.code11.example,this.expected=n+Ct.code11.result;break;case"12":this.example=e+Ct.code12.example,this.expected=n+Ct.code12.result;break;case"13":this.example=e+Ct.code13.example,this.expected=n+Ct.code13.result;break;case"14":this.example=e+Ct.code14.example,this.expected=n+Ct.code14.result;break;case"15":this.example=e+Ct.code15.example,this.expected=n+Ct.code15.result;break;case"16":this.example=e+Ct.code16.example,this.expected=n+Ct.code16.result;break;case"17":this.example=e+Ct.code17.example,this.expected=n+Ct.code17.result;break;case"18":this.example=e+Ct.code18.example,this.expected=n+Ct.code18.result;break;case"19":this.example=e+Ct.code19.example,this.expected=n+Ct.code19.result;break;case"20":this.example=e+Ct.code20.example,this.expected=n+Ct.code20.result;break;case"21":this.example=e+Ct.code21.example,this.expected=n+Ct.code21.result;break;default:this.example="请以JSON格式输入函数所需参数",this.expected="云函数执行结果, 非必要请勿修改";break}},input:function(){if(""!=this.value)if(""!=this.text)switch(this.result="Loading...",this.value){case"1":this.callCloudFunction("Average","pyz");break;case"2":this.callCloudFunction("Maximum","pyz");break;case"3":this.callCloudFunction("Minimum","pyz");break;case"4":this.callCloudFunction("weightaverage","pyz");break;case"5":this.callCloudFunction("count","pyz");break;case"6":this.callCloudFunction("finitebit","pyz");break;case"7":this.callCloudFunction("variance","sj");break;case"8":this.callCloudFunction("sort","sj");break;case"9":this.callCloudFunction("mode","sj");break;case"10":this.callCloudFunction("medium","sj");break;case"11":this.callCloudFunction("replace","pyz",11);break;case"12":this.callCloudFunction("covariance","sj");break;case"13":this.callCloudFunction("normalize","sj");break;case"14":this.callCloudFunction("Missing_value","sj",14);break;case"15":this.callCloudFunction("combine","pyz",15);break;case"16":this.callCloudFunction("redundant","pyz");break;case"17":this.callCloudFunction("Remove_outlier_values","sj",17);break;case"18":this.callCloudFunction("WidthDiscrete","pyz",18);break;case"19":this.callCloudFunction("FrequencyDiscrete","pyz",19);break;case"20":this.callCloudFunction("sole","sj",20);break;case"21":this.callCloudFunction("divide","pyz",21);break;default:break}else this.result="Empty Input";else this.result="Please select a function first"},callCloudFunction:function(e,n,t){var d=this,a=o(6166),s=".api.cheeseburgerim.space/",l={method:"post",url:"https://"+n+s+e,data:d.text};a(l).then((function(e){var n=e.data;if(11==t||14==t||17==t||20==t){for(var o=(new Date).toLocaleString()+"\nClould Function Result: \n",a=0;a<n.length;a++)o=o+"["+n[a]+"]\n";d.result=o}else if(15==t){var s=(new Date).toLocaleString()+"\nClould Function Result: \n";s=s+"      "+n.split("(")[1].split(", dtype")[0],s.includes(")")&&(s=s.split(")")[0]),d.result=s}else if(18==t||19==t){var l=(new Date).toLocaleString()+"\nClould Function Result: \n";for(var c in n)l=l+c+": "+n[c]+"\n";d.result=l}else if(21==t){var r=(new Date).toLocaleString()+"\nClould Function Result: \n",i=n.split("],");for(var u in i)r=u!=i.length-1?r+i[u]+"],\n":r+i[u]+"\n";d.result=r}else d.result=(new Date).toLocaleString()+"\nClould Function Result: \n"+n})).catch((function(e){console.log(e)}))}},data:function(){return{options:_t.FunctionList,value:"",text:"",result:"",example:"请以JSON格式输入函数所需参数",expected:"云函数执行结果, 非必要请勿修改"}}},St=Tt,zt=(0,oe.Z)(St,ie,ue,!1,null,null,null),Ot=zt.exports,Lt=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"Code"}},[o("el-menu",{staticClass:"hoverEffect",attrs:{mode:"vertical"}},e._l(e.itemList,(function(n){return o("el-menu-item",{key:n.key,on:{click:function(o){return e.itemChange(n.key)}}},[e._v(e._s(n.value))])})),1),o("editor",{staticClass:"hoverEffect",staticStyle:{"margin-right":"17px"},attrs:{lang:"python",theme:"chrome",width:"87%",height:"77vh",options:e.options},on:{init:e.editorInit},model:{value:e.content,callback:function(n){e.content=n},expression:"content"}})],1)},Rt=[],Pt={name:"Code",components:{editor:o(1190)},methods:{editorInit:function(){o(6932),o(803),o(3277),o(3139)},itemChange:function(e){switch(this.item=e,this.item){case"1":this.content=Ct.code1.code;break;case"2":this.content=Ct.code2.code;break;case"3":this.content=Ct.code3.code;break;case"4":this.content=Ct.code4.code;break;case"5":this.content=Ct.code5.code;break;case"6":this.content=Ct.code6.code;break;case"7":this.content=Ct.code7.code;break;case"8":this.content=Ct.code8.code;break;case"9":this.content=Ct.code9.code;break;case"10":this.content=Ct.code10.code;break;case"11":this.content=Ct.code11.code;break;case"12":this.content=Ct.code12.code;break;case"13":this.content=Ct.code13.code;break;case"14":this.content=Ct.code14.code;break;case"15":this.content=Ct.code15.code;break;case"16":this.content=Ct.code16.code;break;case"17":this.content=Ct.code17.code;break;case"18":this.content=Ct.code18.code;break;case"19":this.content=Ct.code19.code;break;case"20":this.content=Ct.code20.code;break;case"21":this.content=Ct.code21.code;break;default:this.content=Ct.code;break}}},data:function(){return{options:{enableBasicAutocompletion:!0,enableSnippets:!0,enableLiveAutocompletion:!0,printMarginColumn:30,displayIndentGuides:!1,enableEmmet:!0,tabSize:6,fontSize:18,useWorker:!0,showPrintMargin:!1,enableMultiselect:!0,readOnly:!1,showFoldWidgets:!0,fadeFoldWidgets:!0,wrap:!0},itemList:_t.FunctionList,content:Ct.code,item:""}}},At=Pt,Dt=(0,oe.Z)(At,Lt,Rt,!1,null,null,null),It=Dt.exports,Mt=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"Document"}})},$t=[],Nt={name:"Document"},Wt=Nt,qt=(0,oe.Z)(Wt,Mt,$t,!1,null,null,null),Jt=qt.exports,Ht=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"About"}})},Gt=[],Ut={name:"About"},Kt=Ut,Qt=(0,oe.Z)(Kt,Ht,Gt,!1,null,null,null),Vt=Qt.exports,Xt=new re.Z({routes:[{path:"/",redirect:"/index"},{path:"/index",component:Ot},{path:"/code",component:It},{path:"/document",component:Jt},{path:"/about",component:Vt}]}),Yt=o(4549),ed=o.n(Yt);K["default"].use(re.Z),K["default"].use(ed()),K["default"].config.productionTip=!1,new K["default"]({render:function(e){return e(ce)},router:Xt}).$mount("#app")}},n={};function o(t){var d=n[t];if(void 0!==d)return d.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.m=e,function(){o.amdD=function(){throw new Error("define cannot be used indirect")}}(),function(){var e=[];o.O=function(n,t,d,a){if(!t){var s=1/0;for(i=0;i<e.length;i++){t=e[i][0],d=e[i][1],a=e[i][2];for(var l=!0,c=0;c<t.length;c++)(!1&a||s>=a)&&Object.keys(o.O).every((function(e){return o.O[e](t[c])}))?t.splice(c--,1):(l=!1,a<s&&(s=a));if(l){e.splice(i--,1);var r=d();void 0!==r&&(n=r)}}return n}a=a||0;for(var i=e.length;i>0&&e[i-1][2]>a;i--)e[i]=e[i-1];e[i]=[t,d,a]}}(),function(){o.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return o.d(n,{a:n}),n}}(),function(){o.d=function(e,n){for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})}}(),function(){o.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)}}(),function(){o.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){var e={143:0};o.O.j=function(n){return 0===e[n]};var n=function(n,t){var d,a,s=t[0],l=t[1],c=t[2],r=0;if(s.some((function(n){return 0!==e[n]}))){for(d in l)o.o(l,d)&&(o.m[d]=l[d]);if(c)var i=c(o)}for(n&&n(t);r<s.length;r++)a=s[r],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return o.O(i)},t=self["webpackChunkdemo"]=self["webpackChunkdemo"]||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))}();var t=o.O(void 0,[998],(function(){return o(947)}));t=o.O(t)})();
//# sourceMappingURL=app-legacy.07b4d990.js.map