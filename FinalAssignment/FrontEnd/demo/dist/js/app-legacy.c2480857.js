(function(){"use strict";var e={3731:function(e,n,t){t(6992),t(8674),t(9601),t(7727);var o,d,a,s,l,c,r,i,u,p,m,y,h,x,b,f,v,B,j,k,g,C,w,F,_,E,Z,A,S,T,z,O,D,I,L,M,R,P,$,q,N,W,J,V,H,G,U=t(8935),K=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"app"}},[t("IndexPage")],1)},Q=[],X=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"IndexPage"}},[t("div",{attrs:{id:"siteBackground"}}),t("div",{attrs:{id:"index"}},[t("transition",{attrs:{name:"navigation",appear:""}},[t("div",{attrs:{id:"navigation"}},[t("div",{attrs:{id:"menu"}},[t("div",{attrs:{id:"menuList"}},[t("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[t("router-link",{attrs:{to:"/index","active-class":"menuActive"}},[t("i",{staticClass:"el-icon-s-home"}),t("span",[e._v("主页")])])],1),t("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[t("router-link",{attrs:{to:"/code","active-class":"menuActive"}},[t("i",{staticClass:"el-icon-s-tools"}),t("span",[e._v("代码")])])],1),t("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[t("router-link",{attrs:{to:"/document","active-class":"menuActive"}},[t("i",{staticClass:"el-icon-s-management"}),t("span",[e._v("文档")])])],1),t("div",{staticClass:"menuChild",attrs:{onclick:"window.scroll({top:0,left:0,behavior:'instant'})"}},[t("router-link",{attrs:{to:"/about","active-class":"menuActive"}},[t("i",{staticClass:"el-icon-s-custom"}),t("span",[e._v("关于")])])],1)])])])])],1),t("h1",{staticStyle:{"margin-top":"70px"}},[e._v("虚拟化技术与云计算 - 基于Serverless的数据预处理服务")]),t("transition",{attrs:{name:"content",appear:""}},[t("keep-alive",[t("router-view")],1)],1)],1)},Y=[],ee={name:"IndexPage",methods:{},mounted:function(){},data:function(){return{}}},ne=ee,te=t(1001),oe=(0,te.Z)(ne,X,Y,!1,null,null,null),de=oe.exports,ae={name:"App",components:{IndexPage:de}},se=ae,le=(0,te.Z)(se,K,Q,!1,null,null,null),ce=le.exports,re=t(9624),ie=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"Home"}},[t("el-select",{staticStyle:{"margin-right":"17px"},attrs:{placeholder:"请选择云函数",filterable:"","default-first-option":!0},on:{change:function(n){return e.selectionChange()}},model:{value:e.value,callback:function(n){e.value=n},expression:"value"}},e._l(e.options,(function(e){return t("el-option",{key:e.key,attrs:{label:e.value,value:e.key}})})),1),t("el-button",{staticStyle:{"margin-left":"17px"},attrs:{type:"primary",plain:""},on:{click:function(n){return e.input()}}},[e._v("代码测试 RUN")]),t("div",{attrs:{id:"IO"}},[t("el-input",{attrs:{type:"textarea",autosize:{minRows:11,maxRows:11},placeholder:e.example,size:"large"},model:{value:e.text,callback:function(n){e.text=n},expression:"text"}}),t("el-input",{attrs:{type:"textarea",autosize:{minRows:11,maxRows:11},placeholder:e.expected,size:"large"},model:{value:e.result,callback:function(n){e.result=n},expression:"result"}})],1)],1)},ue=[],pe=(t(4916),t(3123),t(6699),t(2023),'# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.mean(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n'),me="[1,2,3,4,5,6,7]",ye="4",he={code:pe,example:me,result:ye},xe=he,be=(0,te.Z)(xe,o,d,!1,null,null,null),fe=be.exports,ve='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(max(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Be="[5,20,10]",je="20",ke={code:ve,example:Be,result:je},ge=ke,Ce=(0,te.Z)(ge,a,s,!1,null,null,null),we=Ce.exports,Fe='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(min(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',_e="[5,20,10]",Ee="5",Ze={code:Fe,example:_e,result:Ee},Ae=Ze,Se=(0,te.Z)(Ae,l,c,!1,null,null,null),Te=Se.exports,ze='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.average(jsonBody["data"], weights=jsonBody["weight"])),\n        "headers": {"Content-Type": "application/json"},\n    }\n\n',Oe='\n{\n    "data": [4,5,2,1,3],\n    "weight": [1,1,1,3,2]\n}\n',De="2.5",Ie={code:ze,example:Oe,result:De},Le=Ie,Me=(0,te.Z)(Le,r,i,!1,null,null,null),Re=Me.exports,Pe='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(Counter(jsonBody)),\n        "headers": {"Content-Type": "application/json"},\n    }\n',$e="[1,2,3,3,4,4,4,5]",qe="\nCounter({\n    3: 2,\n    1: 1,\n    2: 1,\n    4: 1\n})",Ne={code:Pe,example:$e,result:qe},We=Ne,Je=(0,te.Z)(We,u,p,!1,null,null,null),Ve=Je.exports,He='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.around(jsonBody["data"], jsonBody["bitcount"])),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Ge='\n{\n    "data": [1.936,4.656,3.074,4.7767],\n    "bitcount": 2\n}',Ue="\n[\n    1.94 4.66 3.07 4.78\n]",Ke={code:He,example:Ge,result:Ue},Qe=Ke,Xe=(0,te.Z)(Qe,m,y,!1,null,null,null),Ye=Xe.exports,en='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\ndef handler (event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    x = np.var(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(x),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',nn="\n[1,3,7,9,4,0,-1,-3,-7,11,16]",tn="\n40.59504132231405",on={code:en,example:nn,result:tn},dn=on,an=(0,te.Z)(dn,h,x,!1,null,null,null),sn=an.exports,ln='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(x),\n        "headers": {"Content-Type": "application/json"},\n    }\n\n',cn="\n[1,5,2,-5,4,3,0,-1,-3]",rn="\n-5,-3,-1,0,1,2,3,4,5",un={code:ln,example:cn,result:rn},pn=un,mn=(0,te.Z)(pn,b,f,!1,null,null,null),yn=mn.exports,hn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n# from scipy import stats\n\n\ndef handler (event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    counts = np.bincount(jsonBody)\n    print(np.argmax(counts))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.argmax(counts)),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',xn="\n[3,2,6,8,1,2,3,4,3]",bn="3",fn={code:hn,example:xn,result:bn},vn=fn,Bn=(0,te.Z)(vn,v,B,!1,null,null,null),jn=Bn.exports,kn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler (event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.median(jsonBody)),\n        "headers": {\n            "Content-Type": "application/json"\n        }\n    }\n',gn="\n[1,2,3,4,5,6,7,8]",Cn="4.5",wn={code:kn,example:gn,result:Cn},Fn=wn,_n=(0,te.Z)(Fn,j,k,!1,null,null,null),En=_n.exports,Zn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    k = jsonBody["key"]\n    for key in k:\n        print(key, ": ", k[key])\n    m = jsonBody["data"]\n    c = len(m[0])\n    r = len(m)\n    t = [[0 for col in range(c)] for row in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if t[i][j] == 0:\n                for key in k:\n                    if m[i][j] == float(key):\n                        m[i][j] = k[key]\n                        t[i][j] = 1\n                        break\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(m),\n        "headers": {"Content-Type": "application/json"},\n    }\n',An='\n{\n    "key":{\n        "1":0,\n        "0":1\n    },\n    "data":[\n        [0,1,2,3],\n        [1,2,3,4]\n    ]\n}',Sn="[1,0,2,3]\n[0,2,3,4]",Tn={code:Zn,example:An,result:Sn},zn=Tn,On=(0,te.Z)(zn,g,C,!1,null,null,null),Dn=On.exports,In='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    jsonBody = jsonBody.split(".")\n    str1 = jsonBody[0].replace("[", "").replace("]", "")\n    str2 = jsonBody[1].replace("[", "").replace("]", "")\n    list1 = str1.split(",")\n    list2 = []\n    for i in list1:\n        i = float(i)\n        list2.append(i)\n    list3 = str2.split(",")\n    list4 = []\n    for i in list3:\n        i = float(i)\n        list4.append(i)\n    a = np.array([list2, list4])\n    ans = np.cov(a)\n    # avg1 = np.mean(list1)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Ln='"[3,2,6,8,1,2,3,4,3].[1,2,3,4,5,6,7,8,9]"',Mn="\n[[ 4.77777778 -0.75      ]\n [-0.75        7.5       ]]",Rn={code:In,example:Ln,result:Mn},Pn=Rn,$n=(0,te.Z)(Pn,w,F,!1,null,null,null),qn=$n.exports,Nn='# -- coding:utf-8 --\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n    list1 = []\n    for i in jsonBody:\n        list1.append((i - min(jsonBody)) / (max(jsonBody) - min(jsonBody)))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(list1),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Wn="[3,4,1,2,0]",Jn="\n[0.75, 1.0, 0.25, 0.5, 0.0]",Vn={code:Nn,example:Wn,result:Jn},Hn=Vn,Gn=(0,te.Z)(Hn,_,E,!1,null,null,null),Un=Gn.exports,Kn='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = np.array(jsonBody, dtype=np.float)\n    raw = len(a)\n    col = len(a[0])\n    temp = []\n    # ans = []\n    for i in range(0, raw):\n        vec = a[i]\n        for j in range(0, col):\n            if np.isnan(vec[j]):\n                a[i][j] = 0\n    # ans = np.array(ans)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Qn="\n[\n    [1,2,null,4],\n    [null,3,4,5],\n    [5,2,null,7],\n    [6,1,2,10]\n]",Xn="[1,0,2,3]\n[0,2,3,4]",Yn={code:Kn,example:Qn,result:Xn},et=Yn,nt=(0,te.Z)(et,Z,A,!1,null,null,null),tt=nt.exports,ot='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["axis"]\n    m = jsonBody["data"]\n    l = len(jsonBody)\n    ans = []\n    if l == 1:\n        ans.append(m)\n    else:\n        ans.append(np.concatenate(m,int(a)))\n        # for i in range(l - 1):\n        #     ans.append(np.append(m[i], m[i + 1], int(a)))\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',dt='\n{\n    "axis": 0, // 0为行拼接;1为列拼接\n    "data": [\n        [\n            [1,2,3],\n            [2,3,4]\n        ],\n        [\n            [5,6,7],\n            [6,7,8]\n        ],\n        [\n            ["a","b","c"],\n            ["d","e","f"]\n        ]\n    ]\n}',at="\n[['1', '2', '3'],\n['2', '3', '4'],\n['5', '6', '7'],\n['6', '7', '8'],\n['a', 'b', 'c'],\n['d', 'e', 'f']]",st={code:ot,example:dt,result:at},lt=st,ct=(0,te.Z)(lt,S,T,!1,null,null,null),rt=ct.exports,it='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nfrom collections import Counter\nimport base64\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody)\n    jsonBody = json.loads(decodedBody)\n    decodedBody = decodedBody.decode()\n    arr = np.array(jsonBody)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(np.array(list(set([tuple(t) for t in arr])))),\n        "headers": {"Content-Type": "application/json"},\n    }\n',ut="\n[\n    [1,2,3],\n    [1,2,3],\n    [2,3,4]\n]",pt="\n[[2 3 4]\n [1 2 3]]",mt={code:it,example:ut,result:pt},yt=mt,ht=(0,te.Z)(yt,z,O,!1,null,null,null),xt=ht.exports,bt='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    mean = np.mean(jsonBody)\n    std = np.std(jsonBody)\n    sigma = std * 3\n    a = np.array(jsonBody, dtype=float)\n    row = len(a)\n    col = len(a[0])\n\n    # ans = np.array()\n    counterlist = []\n    for i in range(0, row):\n        for j in range(0, col):\n            if (a[i][j] - mean) > sigma:\n                counterlist.append(i)\n    for i in counterlist:\n        a = np.delete(a, i, 0)\n\n    # x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',ft="\n[\n    [2,3,4,5],\n    [5,2,4,7],\n    [1,2,10000,4],\n    [10000,100000,10000,10000]\n]",vt="\n[2,3,4,5]\n[5,2,4,7]\n[1,2,10000,4]",Bt={code:bt,example:ft,result:vt},jt=Bt,kt=(0,te.Z)(jt,D,I,!1,null,null,null),gt=kt.exports,Ct='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["data"]\n    a = sorted(a)\n    l = len(a)\n    w = jsonBody["width"]\n    maximum = max(a)\n    minimum = min(a)\n    x = int((maximum - minimum) / w)  # 结果共有x(+1)组数据\n    print(a, l, w, x)\n    ans = {}\n    index = -1\n    for i in range(x):\n        key = str(w * i) + "~" + str((w * (i + 1)))\n        value = []\n        for j in range(index + 1, l):\n            if a[j] <= w * (i + 1):\n                index = j\n                value.append(a[j])\n        ans[key] = value\n        print(key, " - ", value)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',wt='\n{\n    "width":4,\n    "data":[3,6,1,8,3,0,5]\n}',Ft="\n0~4: 0,1,3,3\n4~8: 5,6,8",_t={code:Ct,example:wt,result:Ft},Et=_t,Zt=(0,te.Z)(Et,L,M,!1,null,null,null),At=Zt.exports,St='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    a = jsonBody["data"]\n    a = sorted(a)\n    l = len(a)\n    f = jsonBody["frequency"]\n    n = int(l * f)  # 每组数据的个数\n    x = int(l / n)  # 结果共有x(+1)组数据\n    y = l - x * n  # 第x+1组的数据\n    print(a, l, f, n, x, y)\n    ans = {}\n    for i in range(x):\n        key = str(n * i) + "~" + str((n * (i + 1)))\n        value = a[n * i : (n * (i + 1))]\n        ans[key] = value\n        print(key, " - ", value)\n    if y != 0:\n        key = str(n * x) + "~" + str(l)\n        value = a[n * x :]\n        ans[key] = value\n        print(key, " - ", value)\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(ans),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Tt='\n{\n    "frequency":0.4,\n    "data":[3,6,1,8,3,0,5]\n}',zt="\n0~2: 0,1\n2~4: 3,3\n4~6: 5,6\n6~7: 8",Ot={code:St,example:Tt,result:zt},Dt=Ot,It=(0,te.Z)(Dt,R,P,!1,null,null,null),Lt=It.exports,Mt='# -*- coding:utf-8 -*-\nimport json\nimport numpy as np\nimport base64\n\n\ndef handler(event, context):\n\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody).decode()\n    jsonBody = json.loads(decodedBody)\n\n    mean = np.mean(jsonBody)\n    # std = np.std(jsonBody)\n    # sigma = std * 3\n    a = np.array(jsonBody, dtype=float)\n    row = len(a)\n    col = len(a[0])\n\n    # ans = np.array()\n    tempSet = set()\n    counterlist = []\n    for i in range(0, col):\n        for j in range(0, row):\n            tempSet.add(a[j][i])\n        if len(tempSet) == row:\n            counterlist.append(i)\n        tempSet = set()\n    print(counterlist)\n    for i in range(len(counterlist) - 1, -1, -1):\n        a = np.delete(a, counterlist[i], 1)\n\n    # x = sorted(jsonBody)\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": json.dumps(a.tolist()),\n        "headers": {"Content-Type": "application/json"},\n    }\n',Rt="\n[\n    [1,3,5,7],\n    [2,4,6,8],\n    [3,6,9,12],\n    [2,5,7,8]\n]",Pt="\n[1,7]\n[2,8]\n[3,12]\n[2,8]",$t={code:Mt,example:Rt,result:Pt},qt=$t,Nt=(0,te.Z)(qt,$,q,!1,null,null,null),Wt=Nt.exports,Jt='import json\nimport base64\nimport numpy as np\n\n\ndef handler(event, context):\n    encodedBody = event["body"]\n    decodedBody = base64.b64decode(encodedBody)\n    jsonBody = json.loads(decodedBody)\n    decodedBody = decodedBody.decode()\n    res = []\n    colnum = jsonBody["col"] - 1\n    boundary = jsonBody["boundary"]\n    arr = np.array(jsonBody["data"], dtype=str)\n    raw = len(arr)\n    col = len(arr[0])\n    list = []\n    temp = []\n    for i in range(0, raw):\n        for j in range(0, col):\n            if j != colnum:\n                temp.append(int(arr[i][j]))\n            else:\n                if int(arr[i][colnum]) >= boundary:\n                    temp.append("high")\n                else:\n                    temp.append("low")\n        list += [temp]\n        temp = []\n\n    return {\n        "statusCode": 200,\n        "isBase64Encoded": False,\n        "body": str(list),\n        "headers": {"Content-Type": "application/jsin"},\n    }\n',Vt='\n{\n    "col":3,\n    "boundary":18,\n    "data":[\n        [14,5,20,11],\n        [26,11,56,24],\n        [33,26,15,5]\n    ]\n}',Ht="\n[1,7]\n[2,8]\n[3,12]\n[2,8]",Gt={code:Jt,example:Vt,result:Ht},Ut=Gt,Kt=(0,te.Z)(Ut,N,W,!1,null,null,null),Qt=Kt.exports,Xt="# Please select a function first",Yt={code:fe.code,example:fe.example,result:fe.result},eo={code:we.code,example:we.example,result:we.result},no={code:Te.code,example:Te.example,result:Te.result},to={code:Re.code,example:Re.example,result:Re.result},oo={code:Ve.code,example:Ve.example,result:Ve.result},ao={code:Ye.code,example:Ye.example,result:Ye.result},so={code:sn.code,example:sn.example,result:sn.result},lo={code:yn.code,example:yn.example,result:yn.result},co={code:jn.code,example:jn.example,result:jn.result},ro={code:En.code,example:En.example,result:En.result},io={code:Dn.code,example:Dn.example,result:Dn.result},uo={code:qn.code,example:qn.example,result:qn.result},po={code:Un.code,example:Un.example,result:Un.result},mo={code:tt.code,example:tt.example,result:tt.result},yo={code:rt.code,example:rt.example,result:rt.result},ho={code:xt.code,example:xt.example,result:xt.result},xo={code:gt.code,example:gt.example,result:gt.result},bo={code:At.code,example:At.example,result:At.result},fo={code:Lt.code,example:Lt.example,result:Lt.result},vo={code:Wt.code,example:Wt.example,result:Wt.result},Bo={code:Qt.code,example:Qt.example,result:Qt.result},jo={code:Xt,code1:Yt,code2:eo,code3:no,code4:to,code5:oo,code6:ao,code7:so,code8:lo,code9:co,code10:ro,code11:io,code12:uo,code13:po,code14:mo,code15:yo,code16:ho,code17:xo,code18:bo,code19:fo,code20:vo,code21:Bo},ko=jo,go=(0,te.Z)(ko,J,V,!1,null,null,null),Co=go.exports,wo=[{key:"1",value:"平均值"},{key:"2",value:"最大值"},{key:"3",value:"最小值"},{key:"4",value:"加权平均"},{key:"5",value:"计数"},{key:"6",value:"保留小数"},{key:"7",value:"方差"},{key:"8",value:"排序"},{key:"9",value:"众数"},{key:"10",value:"中位数"},{key:"11",value:"数据替换"},{key:"12",value:"协方差"},{key:"13",value:"归一化"},{key:"14",value:"填补空缺值"},{key:"15",value:"多数组拼接"},{key:"16",value:"去除冗余"},{key:"17",value:"去除离群值"},{key:"18",value:"等宽离散化"},{key:"19",value:"等频离散化"},{key:"20",value:"去除唯一属性"},{key:"21",value:"数据分组"}],Fo={FunctionList:wo},_o=Fo,Eo=(0,te.Z)(_o,H,G,!1,null,null,null),Zo=Eo.exports,Ao={name:"Home",components:{},methods:{selectionChange:function(){this.text="",this.result="";var e="请以JSON格式输入函数所需参数\nExample: ",n="Expected Result: ";switch(this.value){case"1":this.example=e+Co.code1.example,this.expected=n+Co.code1.result;break;case"2":this.example=e+Co.code2.example,this.expected=n+Co.code2.result;break;case"3":this.example=e+Co.code3.example,this.expected=n+Co.code3.result;break;case"4":this.example=e+Co.code4.example,this.expected=n+Co.code4.result;break;case"5":this.example=e+Co.code5.example,this.expected=n+Co.code5.result;break;case"6":this.example=e+Co.code6.example,this.expected=n+Co.code6.result;break;case"7":this.example=e+Co.code7.example,this.expected=n+Co.code7.result;break;case"8":this.example=e+Co.code8.example,this.expected=n+Co.code8.result;break;case"9":this.example=e+Co.code9.example,this.expected=n+Co.code9.result;break;case"10":this.example=e+Co.code10.example,this.expected=n+Co.code10.result;break;case"11":this.example=e+Co.code11.example,this.expected=n+Co.code11.result;break;case"12":this.example=e+Co.code12.example,this.expected=n+Co.code12.result;break;case"13":this.example=e+Co.code13.example,this.expected=n+Co.code13.result;break;case"14":this.example=e+Co.code14.example,this.expected=n+Co.code14.result;break;case"15":this.example=e+Co.code15.example,this.expected=n+Co.code15.result;break;case"16":this.example=e+Co.code16.example,this.expected=n+Co.code16.result;break;case"17":this.example=e+Co.code17.example,this.expected=n+Co.code17.result;break;case"18":this.example=e+Co.code18.example,this.expected=n+Co.code18.result;break;case"19":this.example=e+Co.code19.example,this.expected=n+Co.code19.result;break;case"20":this.example=e+Co.code20.example,this.expected=n+Co.code20.result;break;case"21":this.example=e+Co.code21.example,this.expected=n+Co.code21.result;break;default:this.example="请以JSON格式输入函数所需参数",this.expected="云函数执行结果, 非必要请勿修改";break}},input:function(){if(""!=this.value)if(""!=this.text)switch(this.result="Loading...",this.value){case"1":this.callCloudFunction("Average","pyz");break;case"2":this.callCloudFunction("Maximum","pyz");break;case"3":this.callCloudFunction("Minimum","pyz");break;case"4":this.callCloudFunction("weightaverage","pyz");break;case"5":this.callCloudFunction("count","pyz");break;case"6":this.callCloudFunction("finitebit","pyz");break;case"7":this.callCloudFunction("variance","sj");break;case"8":this.callCloudFunction("sort","sj");break;case"9":this.callCloudFunction("mode","sj");break;case"10":this.callCloudFunction("medium","sj");break;case"11":this.callCloudFunction("replace","pyz",11);break;case"12":this.callCloudFunction("covariance","sj");break;case"13":this.callCloudFunction("normalize","sj");break;case"14":this.callCloudFunction("Missing_value","sj",14);break;case"15":this.callCloudFunction("combine","pyz",15);break;case"16":this.callCloudFunction("redundant","pyz");break;case"17":this.callCloudFunction("Remove_outlier_values","sj",17);break;case"18":this.callCloudFunction("WidthDiscrete","pyz",18);break;case"19":this.callCloudFunction("FrequencyDiscrete","pyz",19);break;case"20":this.callCloudFunction("sole","sj",20);break;case"21":this.callCloudFunction("divide","pyz",21);break;default:break}else this.result="Empty Input";else this.result="Please select a function first"},callCloudFunction:function(e,n,o){var d=this,a=t(6166),s=".api.cheeseburgerim.space/",l={method:"post",url:"https://"+n+s+e,data:d.text};a(l).then((function(e){var n=e.data;if(11==o||14==o||17==o||20==o){for(var t=(new Date).toLocaleString()+"\nClould Function Result: \n",a=0;a<n.length;a++)t=t+"["+n[a]+"]\n";d.result=t}else if(15==o){var s=(new Date).toLocaleString()+"\nClould Function Result: \n";s=s+"      "+n.split("(")[1].split(", dtype")[0],s.includes(")")&&(s=s.split(")")[0]),d.result=s}else if(18==o||19==o){var l=(new Date).toLocaleString()+"\nClould Function Result: \n";for(var c in n)l=l+c+": "+n[c]+"\n";d.result=l}else if(21==o){var r=(new Date).toLocaleString()+"\nClould Function Result: \n",i=n.split("],");for(var u in i)r=u!=i.length-1?r+i[u]+"],\n":r+i[u]+"\n";d.result=r}else d.result=(new Date).toLocaleString()+"\nClould Function Result: \n"+n})).catch((function(e){console.log(e)}))}},data:function(){return{options:Zo.FunctionList,value:"",text:"",result:"",example:"请以JSON格式输入函数所需参数",expected:"云函数执行结果, 非必要请勿修改"}}},So=Ao,To=(0,te.Z)(So,ie,ue,!1,null,null,null),zo=To.exports,Oo=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"Code"}},[t("el-menu",{staticClass:"hoverEffect",attrs:{mode:"vertical"}},e._l(e.itemList,(function(n){return t("el-menu-item",{key:n.key,on:{click:function(t){return e.itemChange(n.key)}}},[e._v(e._s(n.value))])})),1),t("editor",{staticClass:"hoverEffect",staticStyle:{"margin-right":"17px"},attrs:{lang:"python",theme:"chrome",width:"87%",height:"77vh",options:e.options},on:{init:e.editorInit},model:{value:e.content,callback:function(n){e.content=n},expression:"content"}})],1)},Do=[],Io={name:"Code",components:{editor:t(1190)},methods:{editorInit:function(){t(6932),t(803),t(3277),t(3139)},itemChange:function(e){switch(this.item=e,this.item){case"1":this.content=Co.code1.code;break;case"2":this.content=Co.code2.code;break;case"3":this.content=Co.code3.code;break;case"4":this.content=Co.code4.code;break;case"5":this.content=Co.code5.code;break;case"6":this.content=Co.code6.code;break;case"7":this.content=Co.code7.code;break;case"8":this.content=Co.code8.code;break;case"9":this.content=Co.code9.code;break;case"10":this.content=Co.code10.code;break;case"11":this.content=Co.code11.code;break;case"12":this.content=Co.code12.code;break;case"13":this.content=Co.code13.code;break;case"14":this.content=Co.code14.code;break;case"15":this.content=Co.code15.code;break;case"16":this.content=Co.code16.code;break;case"17":this.content=Co.code17.code;break;case"18":this.content=Co.code18.code;break;case"19":this.content=Co.code19.code;break;case"20":this.content=Co.code20.code;break;case"21":this.content=Co.code21.code;break;default:this.content=Co.code;break}}},data:function(){return{options:{enableBasicAutocompletion:!0,enableSnippets:!0,enableLiveAutocompletion:!0,printMarginColumn:30,displayIndentGuides:!1,enableEmmet:!0,tabSize:6,fontSize:18,useWorker:!0,showPrintMargin:!1,enableMultiselect:!0,readOnly:!1,showFoldWidgets:!0,fadeFoldWidgets:!0,wrap:!0},itemList:Zo.FunctionList,content:Co.code,item:""}}},Lo=Io,Mo=(0,te.Z)(Lo,Oo,Do,!1,null,null,null),Ro=Mo.exports,Po=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"Document"}},[o("img",{attrs:{src:t(2299)}}),o("h3",[e._v("智能与计算学部")]),o("h3",[e._v("2019级软件工程专业")]),o("h3",[e._v("2022/4/29")]),o("div",{attrs:{id:"btn-container"}},[o("el-button",{attrs:{type:"primary",round:""}},[o("a",{attrs:{href:"https://gitee.com/CheeseburgerIM/VirtualAndCloud/blob/main/FinalAssignment/Doc/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE.pdf",target:"_blank"}},[e._v("作业题目")])]),o("el-button",{attrs:{type:"success",round:""}},[o("a",{attrs:{href:"https://gitee.com/CheeseburgerIM/VirtualAndCloud/blob/main/FinalAssignment/Doc/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AF%84%E5%88%86%E7%BB%86%E5%88%99.pdf",target:"_blank"}},[e._v("评分细则")])]),o("el-button",{attrs:{type:"warning",round:""}},[o("a",{attrs:{href:"https://baidu.com",target:"_blank"}},[e._v("项目报告")])]),o("el-button",{attrs:{type:"danger",round:""}},[o("a",{attrs:{href:"https://gitee.com/CheeseburgerIM/VirtualAndCloud/tree/main/FinalAssignment",target:"_blank"}},[e._v("代码仓库")])])],1)])},$o=[],qo={name:"Document"},No=qo,Wo=(0,te.Z)(No,Po,$o,!1,null,"8b707160",null),Jo=Wo.exports,Vo=function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},Ho=[function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{attrs:{id:"About"}},[o("h2",[e._v("开发团队")]),o("figure",{staticClass:"sample"},[o("img",{attrs:{src:t(3523),alt:"sample1"}}),o("figcaption",[o("h3",[e._v("潘祎哲")]),o("p",[e._v("Life will always find its way")])]),o("a",{attrs:{href:"https://github.com/CheeseburgerIM",target:"_blank"}})]),o("figure",{staticClass:"sample"},[o("img",{attrs:{src:t(2091),alt:"sample1"}}),o("figcaption",[o("h3",[e._v("宋 杰")]),o("p",[e._v(" Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer. ")])]),o("a",{attrs:{href:"https://github.com/Artist-Song",target:"_blank"}})]),o("figure",{staticClass:"sample"},[o("img",{attrs:{src:t(2809),alt:"sample1"}}),o("figcaption",[o("h3",[e._v("张雨晴")]),o("p",[e._v("风吹在云, 时针在烧")])]),o("a",{attrs:{href:"https://gitee.com/yuqing_z",target:"_blank"}})])])}],Go={name:"About"},Uo=Go,Ko=(0,te.Z)(Uo,Vo,Ho,!1,null,"7cb82ce0",null),Qo=Ko.exports,Xo=new re.Z({routes:[{path:"/",redirect:"/index"},{path:"/index",component:zo},{path:"/code",component:Ro},{path:"/document",component:Jo},{path:"/about",component:Qo}]}),Yo=t(4549),ed=t.n(Yo);U["default"].use(re.Z),U["default"].use(ed()),U["default"].config.productionTip=!1,new U["default"]({render:function(e){return e(ce)},router:Xo}).$mount("#app")},3523:function(e,n,t){e.exports=t.p+"img/pyz.a80de44e.png"},2091:function(e,n,t){e.exports=t.p+"img/sj.12c6503e.jpg"},2809:function(e,n,t){e.exports=t.p+"img/zyq.dc8eaad1.jpg"},2299:function(e,n,t){e.exports=t.p+"img/1.3d64e66a.jpg"}},n={};function t(o){var d=n[o];if(void 0!==d)return d.exports;var a=n[o]={exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,function(){t.amdD=function(){throw new Error("define cannot be used indirect")}}(),function(){var e=[];t.O=function(n,o,d,a){if(!o){var s=1/0;for(i=0;i<e.length;i++){o=e[i][0],d=e[i][1],a=e[i][2];for(var l=!0,c=0;c<o.length;c++)(!1&a||s>=a)&&Object.keys(t.O).every((function(e){return t.O[e](o[c])}))?o.splice(c--,1):(l=!1,a<s&&(s=a));if(l){e.splice(i--,1);var r=d();void 0!==r&&(n=r)}}return n}a=a||0;for(var i=e.length;i>0&&e[i-1][2]>a;i--)e[i]=e[i-1];e[i]=[o,d,a]}}(),function(){t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,{a:n}),n}}(),function(){t.d=function(e,n){for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})}}(),function(){t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)}}(),function(){t.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){t.p="/"}(),function(){var e={143:0};t.O.j=function(n){return 0===e[n]};var n=function(n,o){var d,a,s=o[0],l=o[1],c=o[2],r=0;if(s.some((function(n){return 0!==e[n]}))){for(d in l)t.o(l,d)&&(t.m[d]=l[d]);if(c)var i=c(t)}for(n&&n(o);r<s.length;r++)a=s[r],t.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return t.O(i)},o=self["webpackChunkdemo"]=self["webpackChunkdemo"]||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))}();var o=t.O(void 0,[998],(function(){return t(3731)}));o=t.O(o)})();
//# sourceMappingURL=app-legacy.c2480857.js.map